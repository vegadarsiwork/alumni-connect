// Alumni Engine - Prisma Schema
// The Single Source of Truth

generator client {
  provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  kudos         Int       @default(0)
  createdAt     DateTime  @default(now())

  headline      String?
  education     String?
  skills        String[]  @default([])
  availability  String?   @default("AVAILABLE")

  // NextAuth Relations
  accounts      Account[]
  sessions      Session[]

  // Relations
  asks        Ask[]
  offers      Offer[]
  connectionsAsStudent Connection[] @relation("StudentConnections")
  connectionsAsAlum    Connection[] @relation("AlumConnections")
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ask {
  id          String    @id @default(cuid())
  title       String
  description String
  tags        String[]
  githubUrl   String?
  createdAt   DateTime  @default(now())
  
  // Relations
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  connections Connection[]
}

model Offer {
  id          String    @id @default(cuid())
  title       String
  description String
  tags        String[]
  slots       Int       @default(1)
  totalSlots  Int       @default(1)
  createdAt   DateTime  @default(now())

  // Relations
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  connections Connection[]
}

model Connection {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  status               Status @default(PENDING)
  zoomLink             String? // New field for Zoom link
  alumFeedbackFile     String? // New field for alumni feedback file
  studentUploadFile    String? // New field for student uploaded file

  student              User     @relation("StudentConnections", fields: [studentId], references: [id])
  studentId            String
  alum                 User     @relation("AlumConnections", fields: [alumId], references: [id])
  alumId               String
  ask                  Ask      @relation(fields: [askId], references: [id], onDelete: Cascade)
  askId                String
  offer                Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId              String
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Optional link to related entities
  connectionId String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@index([userId, read])
  @@index([createdAt])
}

enum Role {
  STUDENT
  ALUMNI
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  COMPLETED
  DENIED
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  CONNECTION_DENIED
  CONNECTION_COMPLETED
  KUDOS_RECEIVED
  CONNECTION_WORKSPACE_UPDATED
}
